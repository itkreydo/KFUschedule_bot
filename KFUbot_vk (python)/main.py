import vk_api
import requests
import random
import openpyxl
import modules.bd as database
import json
import res.strings as s
import modules.scheduleClass as sched
from vk_api.utils import get_random_id
import modules.settings as settings
from datetime import datetime,date,timedelta




bd = database.bd("my.db")
session = requests.Session()
login, password = settings.vk_login, settings.vk_pass
vk_session = vk_api.VkApi(token=settings.token)
vk_session_user = vk_api.VkApi(login=settings.vk_login,password=settings.vk_pass)

try:
    vk_session_user.auth(token_only=True)
except vk_api.AuthError as error_msg:
    print(error_msg)
vk_u = vk_session_user.get_api()

from vk_api.longpoll import VkLongPoll, VkEventType
longpoll = VkLongPoll(vk_session)
vk = vk_session.get_api()

KEYBOARD_STEP_1 = {
    'one_time': False,
    'buttons': [[{
        'action': {
            'type': 'text',
            'payload': json.dumps({'buttons': '1'}),
            'label': '–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫üò∞',
        },
        'color': 'default'
    },
    {
        'action': {
            'type': 'text',
            'payload': json.dumps({'buttons': '2'}),
            'label': '–í—Ç–æ—Ä–Ω–∏–∫üòì',
        },
        'color': 'default'
    }
    ],
    [{
        'action': {
            'type': 'text',
            'payload': json.dumps({'buttons': '1'}),
            'label': '–°—Ä–µ–¥–∞üò±',
        },
        'color': 'default'
    },
    {
        'action': {
            'type': 'text',
            'payload': json.dumps({'buttons': '2'}),
            'label': '–ß–µ—Ç–≤–µ—Ä–≥üôÑ',
        },
        'color': 'default'
    }
    ],
    [{
        'action': {
            'type': 'text',
            'payload': json.dumps({'buttons': '1'}),
            'label': '–ü—è—Ç–Ω–∏—Ü–∞üòè',
        },
        'color': 'default'
    },
    {
        'action': {
            'type': 'text',
            'payload': json.dumps({'buttons': '2'}),
            'label': '–°—É–±–±–æ—Ç–∞ü§ó',
        },
        'color': 'default'
    }
    ],
     [{
            'action': {
                'type': 'text',
                'payload': json.dumps({'buttons': '2'}),
                'label': '–ö–∞–∫–æ–π —Å–µ–≥–æ–¥–Ω—è –¥–µ–Ω—å?ü§∑‚Äç‚ôÄÔ∏è',
            },
            'color': 'primary'
        }
    ]
]
}


KEYBOARD_STEP_1_NEW = {
    'one_time': False,
    'buttons': [[{
        'action': {
            'type': 'text',
            'payload': json.dumps({'buttons': '1'}),
            'label': '–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫üò∞',
        },
        'color': 'default'
    },
    {
        'action': {
            'type': 'text',
            'payload': json.dumps({'buttons': '2'}),
            'label': '–í—Ç–æ—Ä–Ω–∏–∫üòì',
        },
        'color': 'default'
    }
    ],
    [{
        'action': {
            'type': 'text',
            'payload': json.dumps({'buttons': '1'}),
            'label': '–°—Ä–µ–¥–∞üò±',
        },
        'color': 'default'
    },
    {
        'action': {
            'type': 'text',
            'payload': json.dumps({'buttons': '2'}),
            'label': '–ß–µ—Ç–≤–µ—Ä–≥üôÑ',
        },
        'color': 'default'
    }
    ],
    [{
        'action': {
            'type': 'text',
            'payload': json.dumps({'buttons': '1'}),
            'label': '–ü—è—Ç–Ω–∏—Ü–∞üòè',
        },
        'color': 'default'
    },
    {
        'action': {
            'type': 'text',
            'payload': json.dumps({'buttons': '2'}),
            'label': '–°—É–±–±–æ—Ç–∞ü§ó',
        },
        'color': 'default'
    }
    ],
    [{
            'action': {
                'type': 'text',
                'payload': json.dumps({'buttons': '1'}),
                'label': '#–º–µ–Ω—é',
            },
            'color': 'negative'
        },
        {
            'action': {
                'type': 'text',
                'payload': json.dumps({'buttons': '2'}),
                'label': '–°–µ–≥–æ–¥–Ω—èü§∑‚Äç‚ôÄÔ∏è',
            },
            'color': 'primary'
        },
        {
            'action': {
                'type': 'text',
                'payload': json.dumps({'buttons': '2'}),
                'label': 'üì∏',
            },
            'color': 'positive'
        }]
]
}

KEYBOARD_STEP_2 = {
    'one_time': True,
    'buttons': [[{
        'action': {
            'type': 'text',
            'payload': json.dumps({'buttons': '1'}),
            'label': '09-641 (1)',
        },
        'color': 'default'
    },
    {
        'action': {
            'type': 'text',
            'payload': json.dumps({'buttons': '2'}),
            'label': '09-641 (2)',
        },
        'color': 'default'
    }
    ]
]
}

KEYBOARD_MENU = {
    'one_time': True,
    'buttons': [[{
        'action': {
            'type': 'text',
            'payload': json.dumps({'buttons': '1'}),
            'label': '–ò–∑–º–µ–Ω–∏—Ç—å –ø–æ–¥–≥—Ä—É–ø–ø—É',
        },
        'color': 'primary'
    }
    ]
]
}

wb = openpyxl.load_workbook(filename = settings.excel)
sheet = wb['–ë–∞–∫–∞–ª–∞–≤—Ä–∏–∞—Ç']
sch = sched.schedule()
sch.setTimeAndNumOfLessons(sheet)
sch.setMondaySchedule(sheet)
sch.getMondaySchedule()
sch.getAllScheduleJSON()
def prepareNumOfDay(day):
    if day == "monday":
        return 0
    elif day == "tuesday":
        return 1
    elif day == "wednesday":
        return 2
    elif day == "thursday":
        return 3
    elif day == "friday":
        return 4
    elif day == "saturday":
        return 5
    else:
        return datetime.today().weekday()

def prepareDay(day,ru=False):
    if day == s.sat or day==5:
        return "saturday" if not ru else '—Å—É–±–±–æ—Ç–∞'
    if day == s.mon or day==0:
        return "monday" if not ru else '–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫'
    if day == s.tue or day==1:
        return "tuesday" if not ru else '–≤—Ç–æ—Ä–Ω–∏–∫'
    if day == s.wed or day==2:
        return "wednesday" if not ru else '—Å—Ä–µ–¥–∞'
    if day == s.thu or day==3:
        return "thursday" if not ru else '—á–µ—Ç–≤–µ—Ä–≥'
    if day == s.fri or day==4:
        return "friday" if not ru else '–ø—è—Ç–Ω–∏—Ü–∞'
    if day == s.hz:
        return prepareDay(datetime.today().weekday(),ru=ru)
def genDate(day,stringFormat=False):
    today = datetime.today()
    todayWeekDay = datetime.today().weekday()
    if day < todayWeekDay:
        delta=6-day
        d = today + timedelta(days=delta)
        if stringFormat:
            return d.strftime("%d.%m.%Y")
        else:
            return d
    else:
        delta=day-todayWeekDay
        d = today + timedelta(days=delta)
        if stringFormat:
            return d.strftime("%d.%m.%Y")
        else:
            return d
def thisWeek(day):
    todayWeekDay = datetime.today().weekday()
    return False if day < todayWeekDay else True

try:
    for event in longpoll.listen():
        if event.type == VkEventType.MESSAGE_NEW and event.to_me and event.text:
       #–°–ª—É—à–∞–µ–º longpoll, –µ—Å–ª–∏ –ø—Ä–∏—à–ª–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–æ:
            if event.text == s.sat or event.text == s.thu or event.text == s.fri\
                    or event.text == s.mon or event.text == s.tue or event.text == s.wed or event.text==s.hz: #–ï—Å–ª–∏ –Ω–∞–ø–∏—Å–∞–ª–∏ –∑–∞–¥–∞–Ω–Ω—É—é —Ñ—Ä–∞–∑—É
                if event.from_user: #–ï—Å–ª–∏ –Ω–∞–ø–∏—Å–∞–ª–∏ –≤ –õ–°
                    if not bd.select("SELECT * FROM user WHERE vk_id=?", (event.user_id,), isset=True):
                        messageText = "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–≥—Ä—É–ø–ø—É, —á—Ç–æ–±—ã –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ"
                        vk.messages.send(  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                            user_id=event.user_id,
                            message=messageText,
                            random_id=get_random_id(),
                            keyboard=json.dumps(KEYBOARD_STEP_2, ensure_ascii=False))
                    else:
                        group = bd.select("SELECT `group` FROM user WHERE vk_id=?", (event.user_id,))[0][0]
                        dateDay = genDate(prepareNumOfDay(prepareDay(event.text)),stringFormat=True)
                        chWeek = "—á/–Ω" if sch.isChWeek(date=genDate(prepareNumOfDay(prepareDay(event.text)))) else "–Ω/–Ω"
                        thisWeekStr = "—ç—Ç–∞ –Ω–µ–¥–µ–ª—è" if thisWeek(prepareNumOfDay(prepareDay(event.text))) else "—Å–ª–µ–¥. –Ω–µ–¥–µ–ª—è"
                        doptext=''+prepareDay(event.text,ru=True)+' '+dateDay+" "+chWeek+'\n‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî\n' if event.text==s.hz else prepareDay(event.text,ru=True)+' '+dateDay+" "+chWeek+'\n‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî\n'
                        messageText=doptext+sch.getDaySheduleText(prepareDay(event.text),group=group)
                        vk.messages.send( #–û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                            user_id=event.user_id,
                            message=messageText,
                            random_id = get_random_id(),
                            keyboard=json.dumps(KEYBOARD_STEP_1, ensure_ascii=False))

                elif event.from_chat: #–ï—Å–ª–∏ –Ω–∞–ø–∏—Å–∞–ª–∏ –≤ –ë–µ—Å–µ–¥–µ
                    vk.messages.send( #–û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—â–µ–Ω–∏–µ
                        chat_id=event.chat_id,
                        message='–í–∞—à —Ç–µ–∫—Å—Ç',
                        random_id=get_random_id())
            elif event.text == '09-641 (1)' or event.text == '09-641 (2)':
                group=1 if event.text == '09-641 (1)' else 2 #–î–µ–ª–µ–Ω–∏–µ –Ω–∞ 2 –≥—Ä—É–ø–ø—ã
                if event.from_user:  # –ï—Å–ª–∏ –Ω–∞–ø–∏—Å–∞–ª–∏ –≤ –õ–°
                    print("yes",vk_u.users.get(user_ids=event.user_id))
                    vk_name = vk_u.users.get(user_ids=event.user_id)[0]["first_name"]
                    if not bd.select("SELECT * FROM user WHERE vk_id=?",(event.user_id,),isset=True):

                        ins = bd.insert("INSERT INTO user('vk_id','vk_name','step','group') values(?,?,?,?)",(event.user_id,vk_name,1,group))
                        if ins:
                            messageText = "---–î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã---\n"+vk_name+", —Ç–µ–ø–µ—Ä—å —Ç—ã –±—É–¥–µ—à—å –≤–∏–¥–µ—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è "+str(group)+" –ø–æ–¥–≥—Ä—É–ø–ø—ã.\n"+"–ß—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å —Å–≤–æ—é –≥—Ä—É–ø–ø—É –Ω–∞–≤–µ–¥–∏ #–º–µ–Ω—é."
                            vk.messages.send(  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                                user_id=event.user_id,
                                message=messageText,
                                random_id=get_random_id(),
                                keyboard=json.dumps(KEYBOARD_STEP_1, ensure_ascii=False))
                        else:
                            messageText = "–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
                            vk.messages.send(  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                                user_id=event.user_id,
                                message=messageText,
                                random_id=get_random_id(),
                                keyboard=json.dumps(KEYBOARD_STEP_2, ensure_ascii=False))
                    else:
                        upd = bd.update("""UPDATE user SET `group`=? WHERE vk_id=?""",(group,event.user_id))
                        if upd:
                            messageText = "---–î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã---\n" + vk_name + ", —Ç–µ–ø–µ—Ä—å —Ç—ã –±—É–¥–µ—à—å –≤–∏–¥–µ—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è " + str(
                                group) + " –ø–æ–¥–≥—Ä—É–ø–ø—ã.\n" + "–ß—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å —Å–≤–æ—é –≥—Ä—É–ø–ø—É –Ω–∞–≤–µ–¥–∏ #–º–µ–Ω—é."
                            vk.messages.send(  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                                user_id=event.user_id,
                                message=messageText,
                                random_id=get_random_id(),
                                keyboard=json.dumps(KEYBOARD_STEP_1, ensure_ascii=False))
                        else:
                            messageText = "–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
                            vk.messages.send(  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                                user_id=event.user_id,
                                message=messageText,
                                random_id=get_random_id(),
                                keyboard=json.dumps(KEYBOARD_STEP_2, ensure_ascii=False))


            elif event.text == '#–º–µ–Ω—é':
                if event.from_user:  # –ï—Å–ª–∏ –Ω–∞–ø–∏—Å–∞–ª–∏ –≤ –õ–°
                    messageText = "–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π –ø—É–Ω–∫—Ç –º–µ–Ω—é."
                    vk.messages.send(  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                        user_id=event.user_id,
                        message=messageText,
                        random_id=get_random_id(),
                        keyboard=json.dumps(KEYBOARD_MENU, ensure_ascii=False))
            elif event.text == "–ò–∑–º–µ–Ω–∏—Ç—å –ø–æ–¥–≥—Ä—É–ø–ø—É":
                if event.from_user:  # –ï—Å–ª–∏ –Ω–∞–ø–∏—Å–∞–ª–∏ –≤ –õ–°
                    messageText = "–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π –ø—É–Ω–∫—Ç."
                    vk.messages.send(  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                        user_id=event.user_id,
                        message=messageText,
                        random_id=get_random_id(),
                        keyboard=json.dumps(KEYBOARD_STEP_2, ensure_ascii=False))
            elif event.text == "–ù–∞—á–∞—Ç—å":
                if event.from_user:  # –ï—Å–ª–∏ –Ω–∞–ø–∏—Å–∞–ª–∏ –≤ –õ–°
                    messageText = "–î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω—ë–º. –í—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ—é –ø–æ–¥–≥—Ä—É–ø–ø—É."
                    vk.messages.send(  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                        user_id=event.user_id,
                        message=messageText,
                        random_id=get_random_id(),
                        keyboard=json.dumps(KEYBOARD_STEP_2, ensure_ascii=False))
            elif event.text == "—Ñ–æ—Ç–æ" or event.text == s.foto:
                path_photo = "1.jpg"
                #vk_api.VkUpload.photo_messages(path_photo)
                data = vk.photos.getMessagesUploadServer(user_id=event.user_id)

                upload_url = data["upload_url"]
                files = {'photo': open(path_photo, 'rb')}

                response = requests.post(upload_url, files=files)
                result = json.loads(response.text)

                uploadResult = vk.photos.saveMessagesPhoto(server=result["server"],
                                                              photo=result["photo"],
                                                              hash=result["hash"])
                #print(uploadResult,uploadResult[0]["owner_id"])
                attr="photo"+str(uploadResult[0]["owner_id"])+"_"+str(uploadResult[0]["id"])
                vk.messages.send(user_id=event.user_id,
                                    message="–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ",
                                    random_id=get_random_id(),
                                    attachment=attr)

            elif event.text == "–º–µ–Ω—é2":
                messageText='–ú–µ–Ω—é 2'
                vk.messages.send(  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                    user_id=event.user_id,
                    message=messageText,
                    random_id=get_random_id(),
                    keyboard=json.dumps(KEYBOARD_STEP_1_NEW, ensure_ascii=False))
            else:
                messageText='–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏'
                vk.messages.send(  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                    user_id=event.user_id,
                    message=messageText,
                    random_id=get_random_id(),
                    keyboard=json.dumps(KEYBOARD_STEP_1, ensure_ascii=False))


except Exception:
    print("Error connection")






